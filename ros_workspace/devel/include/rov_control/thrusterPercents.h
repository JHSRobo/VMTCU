// Generated by gencpp from file rov_control/thrusterPercents.msg
// DO NOT EDIT!


#ifndef ROV_CONTROL_MESSAGE_THRUSTERPERCENTS_H
#define ROV_CONTROL_MESSAGE_THRUSTERPERCENTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rov_control
{
template <class ContainerAllocator>
struct thrusterPercents_
{
  typedef thrusterPercents_<ContainerAllocator> Type;

  thrusterPercents_()
    : t1(0)
    , t2(0)
    , t3(0)
    , t4(0)
    , t5(0)
    , t6(0)  {
    }
  thrusterPercents_(const ContainerAllocator& _alloc)
    : t1(0)
    , t2(0)
    , t3(0)
    , t4(0)
    , t5(0)
    , t6(0)  {
  (void)_alloc;
    }



   typedef int32_t _t1_type;
  _t1_type t1;

   typedef int32_t _t2_type;
  _t2_type t2;

   typedef int32_t _t3_type;
  _t3_type t3;

   typedef int32_t _t4_type;
  _t4_type t4;

   typedef int32_t _t5_type;
  _t5_type t5;

   typedef int32_t _t6_type;
  _t6_type t6;





  typedef boost::shared_ptr< ::rov_control::thrusterPercents_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rov_control::thrusterPercents_<ContainerAllocator> const> ConstPtr;

}; // struct thrusterPercents_

typedef ::rov_control::thrusterPercents_<std::allocator<void> > thrusterPercents;

typedef boost::shared_ptr< ::rov_control::thrusterPercents > thrusterPercentsPtr;
typedef boost::shared_ptr< ::rov_control::thrusterPercents const> thrusterPercentsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rov_control::thrusterPercents_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rov_control::thrusterPercents_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rov_control::thrusterPercents_<ContainerAllocator1> & lhs, const ::rov_control::thrusterPercents_<ContainerAllocator2> & rhs)
{
  return lhs.t1 == rhs.t1 &&
    lhs.t2 == rhs.t2 &&
    lhs.t3 == rhs.t3 &&
    lhs.t4 == rhs.t4 &&
    lhs.t5 == rhs.t5 &&
    lhs.t6 == rhs.t6;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rov_control::thrusterPercents_<ContainerAllocator1> & lhs, const ::rov_control::thrusterPercents_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rov_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rov_control::thrusterPercents_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rov_control::thrusterPercents_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rov_control::thrusterPercents_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rov_control::thrusterPercents_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rov_control::thrusterPercents_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rov_control::thrusterPercents_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rov_control::thrusterPercents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "860e29d4fdc02d5eacdfc57885542f75";
  }

  static const char* value(const ::rov_control::thrusterPercents_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x860e29d4fdc02d5eULL;
  static const uint64_t static_value2 = 0xacdfc57885542f75ULL;
};

template<class ContainerAllocator>
struct DataType< ::rov_control::thrusterPercents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rov_control/thrusterPercents";
  }

  static const char* value(const ::rov_control::thrusterPercents_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rov_control::thrusterPercents_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 t1\n"
"int32 t2\n"
"int32 t3\n"
"int32 t4\n"
"int32 t5\n"
"int32 t6\n"
;
  }

  static const char* value(const ::rov_control::thrusterPercents_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rov_control::thrusterPercents_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.t1);
      stream.next(m.t2);
      stream.next(m.t3);
      stream.next(m.t4);
      stream.next(m.t5);
      stream.next(m.t6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct thrusterPercents_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rov_control::thrusterPercents_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rov_control::thrusterPercents_<ContainerAllocator>& v)
  {
    s << indent << "t1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.t1);
    s << indent << "t2: ";
    Printer<int32_t>::stream(s, indent + "  ", v.t2);
    s << indent << "t3: ";
    Printer<int32_t>::stream(s, indent + "  ", v.t3);
    s << indent << "t4: ";
    Printer<int32_t>::stream(s, indent + "  ", v.t4);
    s << indent << "t5: ";
    Printer<int32_t>::stream(s, indent + "  ", v.t5);
    s << indent << "t6: ";
    Printer<int32_t>::stream(s, indent + "  ", v.t6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROV_CONTROL_MESSAGE_THRUSTERPERCENTS_H
