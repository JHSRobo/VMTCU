// Generated by gencpp from file gpio_control/gpio_statusRequest.msg
// DO NOT EDIT!


#ifndef GPIO_CONTROL_MESSAGE_GPIO_STATUSREQUEST_H
#define GPIO_CONTROL_MESSAGE_GPIO_STATUSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gpio_control
{
template <class ContainerAllocator>
struct gpio_statusRequest_
{
  typedef gpio_statusRequest_<ContainerAllocator> Type;

  gpio_statusRequest_()
    : gpioNum(0)  {
    }
  gpio_statusRequest_(const ContainerAllocator& _alloc)
    : gpioNum(0)  {
  (void)_alloc;
    }



   typedef int64_t _gpioNum_type;
  _gpioNum_type gpioNum;





  typedef boost::shared_ptr< ::gpio_control::gpio_statusRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gpio_control::gpio_statusRequest_<ContainerAllocator> const> ConstPtr;

}; // struct gpio_statusRequest_

typedef ::gpio_control::gpio_statusRequest_<std::allocator<void> > gpio_statusRequest;

typedef boost::shared_ptr< ::gpio_control::gpio_statusRequest > gpio_statusRequestPtr;
typedef boost::shared_ptr< ::gpio_control::gpio_statusRequest const> gpio_statusRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gpio_control::gpio_statusRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gpio_control::gpio_statusRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gpio_control::gpio_statusRequest_<ContainerAllocator1> & lhs, const ::gpio_control::gpio_statusRequest_<ContainerAllocator2> & rhs)
{
  return lhs.gpioNum == rhs.gpioNum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gpio_control::gpio_statusRequest_<ContainerAllocator1> & lhs, const ::gpio_control::gpio_statusRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gpio_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gpio_control::gpio_statusRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpio_control::gpio_statusRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpio_control::gpio_statusRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpio_control::gpio_statusRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpio_control::gpio_statusRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpio_control::gpio_statusRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gpio_control::gpio_statusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1f39cba9b623a83c32c1228c8c1d3f4";
  }

  static const char* value(const ::gpio_control::gpio_statusRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1f39cba9b623a83ULL;
  static const uint64_t static_value2 = 0xc32c1228c8c1d3f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::gpio_control::gpio_statusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gpio_control/gpio_statusRequest";
  }

  static const char* value(const ::gpio_control::gpio_statusRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gpio_control::gpio_statusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 gpioNum\n"
;
  }

  static const char* value(const ::gpio_control::gpio_statusRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gpio_control::gpio_statusRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gpioNum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gpio_statusRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gpio_control::gpio_statusRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gpio_control::gpio_statusRequest_<ContainerAllocator>& v)
  {
    s << indent << "gpioNum: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gpioNum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPIO_CONTROL_MESSAGE_GPIO_STATUSREQUEST_H
