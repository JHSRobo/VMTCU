// Generated by gencpp from file keyboard_teleop/Sense.msg
// DO NOT EDIT!


#ifndef KEYBOARD_TELEOP_MESSAGE_SENSE_H
#define KEYBOARD_TELEOP_MESSAGE_SENSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace keyboard_teleop
{
template <class ContainerAllocator>
struct Sense_
{
  typedef Sense_<ContainerAllocator> Type;

  Sense_()
    : l_scale(0.0)
    , a_scale(0.0)
    , v_scale(0.0)  {
    }
  Sense_(const ContainerAllocator& _alloc)
    : l_scale(0.0)
    , a_scale(0.0)
    , v_scale(0.0)  {
  (void)_alloc;
    }



   typedef double _l_scale_type;
  _l_scale_type l_scale;

   typedef double _a_scale_type;
  _a_scale_type a_scale;

   typedef double _v_scale_type;
  _v_scale_type v_scale;





  typedef boost::shared_ptr< ::keyboard_teleop::Sense_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::keyboard_teleop::Sense_<ContainerAllocator> const> ConstPtr;

}; // struct Sense_

typedef ::keyboard_teleop::Sense_<std::allocator<void> > Sense;

typedef boost::shared_ptr< ::keyboard_teleop::Sense > SensePtr;
typedef boost::shared_ptr< ::keyboard_teleop::Sense const> SenseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::keyboard_teleop::Sense_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::keyboard_teleop::Sense_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::keyboard_teleop::Sense_<ContainerAllocator1> & lhs, const ::keyboard_teleop::Sense_<ContainerAllocator2> & rhs)
{
  return lhs.l_scale == rhs.l_scale &&
    lhs.a_scale == rhs.a_scale &&
    lhs.v_scale == rhs.v_scale;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::keyboard_teleop::Sense_<ContainerAllocator1> & lhs, const ::keyboard_teleop::Sense_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace keyboard_teleop

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::keyboard_teleop::Sense_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::keyboard_teleop::Sense_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::keyboard_teleop::Sense_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::keyboard_teleop::Sense_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::keyboard_teleop::Sense_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::keyboard_teleop::Sense_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::keyboard_teleop::Sense_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00b658ca86463c93197e8e9aac68e5df";
  }

  static const char* value(const ::keyboard_teleop::Sense_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00b658ca86463c93ULL;
  static const uint64_t static_value2 = 0x197e8e9aac68e5dfULL;
};

template<class ContainerAllocator>
struct DataType< ::keyboard_teleop::Sense_<ContainerAllocator> >
{
  static const char* value()
  {
    return "keyboard_teleop/Sense";
  }

  static const char* value(const ::keyboard_teleop::Sense_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::keyboard_teleop::Sense_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"float64 l_scale\n"
"float64 a_scale\n"
"float64 v_scale\n"
;
  }

  static const char* value(const ::keyboard_teleop::Sense_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::keyboard_teleop::Sense_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.l_scale);
      stream.next(m.a_scale);
      stream.next(m.v_scale);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sense_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::keyboard_teleop::Sense_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::keyboard_teleop::Sense_<ContainerAllocator>& v)
  {
    s << indent << "l_scale: ";
    Printer<double>::stream(s, indent + "  ", v.l_scale);
    s << indent << "a_scale: ";
    Printer<double>::stream(s, indent + "  ", v.a_scale);
    s << indent << "v_scale: ";
    Printer<double>::stream(s, indent + "  ", v.v_scale);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KEYBOARD_TELEOP_MESSAGE_SENSE_H
