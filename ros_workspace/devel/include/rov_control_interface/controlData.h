// Generated by gencpp from file rov_control_interface/controlData.msg
// DO NOT EDIT!


#ifndef ROV_CONTROL_INTERFACE_MESSAGE_CONTROLDATA_H
#define ROV_CONTROL_INTERFACE_MESSAGE_CONTROLDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rov_control_interface
{
template <class ContainerAllocator>
struct controlData_
{
  typedef controlData_<ContainerAllocator> Type;

  controlData_()
    : thrusterStatus(false)
    , dhStatus(false)
    , targetDepth(0.0)
    , linearSense(0.0)
    , angularSense(0.0)
    , verticalSense(0.0)
    , camera(0)  {
    }
  controlData_(const ContainerAllocator& _alloc)
    : thrusterStatus(false)
    , dhStatus(false)
    , targetDepth(0.0)
    , linearSense(0.0)
    , angularSense(0.0)
    , verticalSense(0.0)
    , camera(0)  {
  (void)_alloc;
    }



   typedef uint8_t _thrusterStatus_type;
  _thrusterStatus_type thrusterStatus;

   typedef uint8_t _dhStatus_type;
  _dhStatus_type dhStatus;

   typedef float _targetDepth_type;
  _targetDepth_type targetDepth;

   typedef float _linearSense_type;
  _linearSense_type linearSense;

   typedef float _angularSense_type;
  _angularSense_type angularSense;

   typedef float _verticalSense_type;
  _verticalSense_type verticalSense;

   typedef int32_t _camera_type;
  _camera_type camera;





  typedef boost::shared_ptr< ::rov_control_interface::controlData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rov_control_interface::controlData_<ContainerAllocator> const> ConstPtr;

}; // struct controlData_

typedef ::rov_control_interface::controlData_<std::allocator<void> > controlData;

typedef boost::shared_ptr< ::rov_control_interface::controlData > controlDataPtr;
typedef boost::shared_ptr< ::rov_control_interface::controlData const> controlDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rov_control_interface::controlData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rov_control_interface::controlData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rov_control_interface::controlData_<ContainerAllocator1> & lhs, const ::rov_control_interface::controlData_<ContainerAllocator2> & rhs)
{
  return lhs.thrusterStatus == rhs.thrusterStatus &&
    lhs.dhStatus == rhs.dhStatus &&
    lhs.targetDepth == rhs.targetDepth &&
    lhs.linearSense == rhs.linearSense &&
    lhs.angularSense == rhs.angularSense &&
    lhs.verticalSense == rhs.verticalSense &&
    lhs.camera == rhs.camera;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rov_control_interface::controlData_<ContainerAllocator1> & lhs, const ::rov_control_interface::controlData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rov_control_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rov_control_interface::controlData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rov_control_interface::controlData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rov_control_interface::controlData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rov_control_interface::controlData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rov_control_interface::controlData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rov_control_interface::controlData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rov_control_interface::controlData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b57ae0c64bce85cd8b603507396376d2";
  }

  static const char* value(const ::rov_control_interface::controlData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb57ae0c64bce85cdULL;
  static const uint64_t static_value2 = 0x8b603507396376d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::rov_control_interface::controlData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rov_control_interface/controlData";
  }

  static const char* value(const ::rov_control_interface::controlData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rov_control_interface::controlData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool thrusterStatus\n"
"bool dhStatus\n"
"float32 targetDepth\n"
"float32 linearSense\n"
"float32 angularSense\n"
"float32 verticalSense\n"
"int32 camera\n"
;
  }

  static const char* value(const ::rov_control_interface::controlData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rov_control_interface::controlData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.thrusterStatus);
      stream.next(m.dhStatus);
      stream.next(m.targetDepth);
      stream.next(m.linearSense);
      stream.next(m.angularSense);
      stream.next(m.verticalSense);
      stream.next(m.camera);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controlData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rov_control_interface::controlData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rov_control_interface::controlData_<ContainerAllocator>& v)
  {
    s << indent << "thrusterStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.thrusterStatus);
    s << indent << "dhStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dhStatus);
    s << indent << "targetDepth: ";
    Printer<float>::stream(s, indent + "  ", v.targetDepth);
    s << indent << "linearSense: ";
    Printer<float>::stream(s, indent + "  ", v.linearSense);
    s << indent << "angularSense: ";
    Printer<float>::stream(s, indent + "  ", v.angularSense);
    s << indent << "verticalSense: ";
    Printer<float>::stream(s, indent + "  ", v.verticalSense);
    s << indent << "camera: ";
    Printer<int32_t>::stream(s, indent + "  ", v.camera);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROV_CONTROL_INTERFACE_MESSAGE_CONTROLDATA_H
