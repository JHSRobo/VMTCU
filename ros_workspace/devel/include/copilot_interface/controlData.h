// Generated by gencpp from file copilot_interface/controlData.msg
// DO NOT EDIT!


#ifndef COPILOT_INTERFACE_MESSAGE_CONTROLDATA_H
#define COPILOT_INTERFACE_MESSAGE_CONTROLDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace copilot_interface
{
template <class ContainerAllocator>
struct controlData_
{
  typedef controlData_<ContainerAllocator> Type;

  controlData_()
    : thruster_status(false)
    , dh_status(false)
    , target_depth(0.0)
    , linear_sense(0.0)
    , angular_sense(0.0)
    , vertical_sense(0.0)
    , camera(0)  {
    }
  controlData_(const ContainerAllocator& _alloc)
    : thruster_status(false)
    , dh_status(false)
    , target_depth(0.0)
    , linear_sense(0.0)
    , angular_sense(0.0)
    , vertical_sense(0.0)
    , camera(0)  {
  (void)_alloc;
    }



   typedef uint8_t _thruster_status_type;
  _thruster_status_type thruster_status;

   typedef uint8_t _dh_status_type;
  _dh_status_type dh_status;

   typedef float _target_depth_type;
  _target_depth_type target_depth;

   typedef float _linear_sense_type;
  _linear_sense_type linear_sense;

   typedef float _angular_sense_type;
  _angular_sense_type angular_sense;

   typedef float _vertical_sense_type;
  _vertical_sense_type vertical_sense;

   typedef int32_t _camera_type;
  _camera_type camera;





  typedef boost::shared_ptr< ::copilot_interface::controlData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::copilot_interface::controlData_<ContainerAllocator> const> ConstPtr;

}; // struct controlData_

typedef ::copilot_interface::controlData_<std::allocator<void> > controlData;

typedef boost::shared_ptr< ::copilot_interface::controlData > controlDataPtr;
typedef boost::shared_ptr< ::copilot_interface::controlData const> controlDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::copilot_interface::controlData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::copilot_interface::controlData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::copilot_interface::controlData_<ContainerAllocator1> & lhs, const ::copilot_interface::controlData_<ContainerAllocator2> & rhs)
{
  return lhs.thruster_status == rhs.thruster_status &&
    lhs.dh_status == rhs.dh_status &&
    lhs.target_depth == rhs.target_depth &&
    lhs.linear_sense == rhs.linear_sense &&
    lhs.angular_sense == rhs.angular_sense &&
    lhs.vertical_sense == rhs.vertical_sense &&
    lhs.camera == rhs.camera;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::copilot_interface::controlData_<ContainerAllocator1> & lhs, const ::copilot_interface::controlData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace copilot_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::copilot_interface::controlData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::copilot_interface::controlData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::copilot_interface::controlData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::copilot_interface::controlData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::copilot_interface::controlData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::copilot_interface::controlData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::copilot_interface::controlData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63fc1b5d7859e5a1c46030e539babe05";
  }

  static const char* value(const ::copilot_interface::controlData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63fc1b5d7859e5a1ULL;
  static const uint64_t static_value2 = 0xc46030e539babe05ULL;
};

template<class ContainerAllocator>
struct DataType< ::copilot_interface::controlData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "copilot_interface/controlData";
  }

  static const char* value(const ::copilot_interface::controlData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::copilot_interface::controlData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool thruster_status\n"
"bool dh_status\n"
"float32 target_depth\n"
"float32 linear_sense\n"
"float32 angular_sense\n"
"float32 vertical_sense\n"
"int32 camera\n"
;
  }

  static const char* value(const ::copilot_interface::controlData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::copilot_interface::controlData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.thruster_status);
      stream.next(m.dh_status);
      stream.next(m.target_depth);
      stream.next(m.linear_sense);
      stream.next(m.angular_sense);
      stream.next(m.vertical_sense);
      stream.next(m.camera);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controlData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::copilot_interface::controlData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::copilot_interface::controlData_<ContainerAllocator>& v)
  {
    s << indent << "thruster_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.thruster_status);
    s << indent << "dh_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dh_status);
    s << indent << "target_depth: ";
    Printer<float>::stream(s, indent + "  ", v.target_depth);
    s << indent << "linear_sense: ";
    Printer<float>::stream(s, indent + "  ", v.linear_sense);
    s << indent << "angular_sense: ";
    Printer<float>::stream(s, indent + "  ", v.angular_sense);
    s << indent << "vertical_sense: ";
    Printer<float>::stream(s, indent + "  ", v.vertical_sense);
    s << indent << "camera: ";
    Printer<int32_t>::stream(s, indent + "  ", v.camera);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COPILOT_INTERFACE_MESSAGE_CONTROLDATA_H
