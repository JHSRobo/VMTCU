// Generated by gencpp from file copilot_interface/PIDmsg.msg
// DO NOT EDIT!


#ifndef COPILOT_INTERFACE_MESSAGE_PIDMSG_H
#define COPILOT_INTERFACE_MESSAGE_PIDMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace copilot_interface
{
template <class ContainerAllocator>
struct PIDmsg_
{
  typedef PIDmsg_<ContainerAllocator> Type;

  PIDmsg_()
    : p(0.0)
    , i(0.0)
    , d(0.0)  {
    }
  PIDmsg_(const ContainerAllocator& _alloc)
    : p(0.0)
    , i(0.0)
    , d(0.0)  {
  (void)_alloc;
    }



   typedef float _p_type;
  _p_type p;

   typedef float _i_type;
  _i_type i;

   typedef float _d_type;
  _d_type d;





  typedef boost::shared_ptr< ::copilot_interface::PIDmsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::copilot_interface::PIDmsg_<ContainerAllocator> const> ConstPtr;

}; // struct PIDmsg_

typedef ::copilot_interface::PIDmsg_<std::allocator<void> > PIDmsg;

typedef boost::shared_ptr< ::copilot_interface::PIDmsg > PIDmsgPtr;
typedef boost::shared_ptr< ::copilot_interface::PIDmsg const> PIDmsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::copilot_interface::PIDmsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::copilot_interface::PIDmsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::copilot_interface::PIDmsg_<ContainerAllocator1> & lhs, const ::copilot_interface::PIDmsg_<ContainerAllocator2> & rhs)
{
  return lhs.p == rhs.p &&
    lhs.i == rhs.i &&
    lhs.d == rhs.d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::copilot_interface::PIDmsg_<ContainerAllocator1> & lhs, const ::copilot_interface::PIDmsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace copilot_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::copilot_interface::PIDmsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::copilot_interface::PIDmsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::copilot_interface::PIDmsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::copilot_interface::PIDmsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::copilot_interface::PIDmsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::copilot_interface::PIDmsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::copilot_interface::PIDmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cccd09188ee638c943ed6be95f1812c9";
  }

  static const char* value(const ::copilot_interface::PIDmsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcccd09188ee638c9ULL;
  static const uint64_t static_value2 = 0x43ed6be95f1812c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::copilot_interface::PIDmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "copilot_interface/PIDmsg";
  }

  static const char* value(const ::copilot_interface::PIDmsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::copilot_interface::PIDmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 p\n"
"float32 i\n"
"float32 d\n"
;
  }

  static const char* value(const ::copilot_interface::PIDmsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::copilot_interface::PIDmsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p);
      stream.next(m.i);
      stream.next(m.d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PIDmsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::copilot_interface::PIDmsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::copilot_interface::PIDmsg_<ContainerAllocator>& v)
  {
    s << indent << "p: ";
    Printer<float>::stream(s, indent + "  ", v.p);
    s << indent << "i: ";
    Printer<float>::stream(s, indent + "  ", v.i);
    s << indent << "d: ";
    Printer<float>::stream(s, indent + "  ", v.d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COPILOT_INTERFACE_MESSAGE_PIDMSG_H
